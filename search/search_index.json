{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Knowledge Base","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"about/","title":"bruh.","text":""},{"location":"crypto/introduction/","title":"Introduction to Cryptography","text":"<p>Cryptography is the science of secret writing with the goal of hiding the meaning of a message. In the modern day, this is done with math. Usually complicated math. If you can't stand math then I'm sorry crypto is probably not going to be your favorite.</p> <p>In CTFs, the goal is typically to defeat a cryptographic system. This can take several forms, including but not limited to:  brute forcing (somewhat rare, almost always has some way to make the brute forcing more efficient), finding an error in their implementation that makes the encryption weak, exploiting weak parameters, and/or replicating a well known attack.</p>"},{"location":"crypto/introduction/#skills-to-know","title":"Skills to know","text":"<ul> <li>Python</li> <li>Math, especially discrete math</li> <li>Knowledge of common encryption schemes and cryptanalysis methods</li> </ul>"},{"location":"crypto/resources/","title":"Resources/Tools","text":"<p>The following is a hastily put-together list of relevant tools and resources.</p> <ul> <li>Crypto Attacks - various cryptographic attacks in python</li> <li>yafu - Automated integer factorization</li> <li>Ciphey - Automated decryptor/brute-forcer (good for low-hanging fruit)</li> <li>quipquip - helpful for solving more traditional ciphers</li> <li>Morse code decoder</li> <li>bitwise operations - silly cheatsheet</li> <li>Hash Length Extension Attack</li> <li>Timing attack talks</li> <li></li> </ul>"},{"location":"crypto/starting-point/","title":"Starting Point","text":"<p>So you want to work on a crypto challenge. Now what? Here are some steps for approaching a crypto chalenge: 1. Read the challenge description and title 2. Download and analyze the related files 3. Identify the challenge task 4. Research the challenge 5. Attempt solutions</p>"},{"location":"crypto/starting-point/#read-the-challenge-description-and-title","title":"Read the challenge description and title","text":"<p>The first step in approaching any challenge is reading the challenge. This step is fairly basic, but important nonetheless. When giving a challenge description an initial read, it's helpful to identify several things: - What encryption scheme are they using? Is it a standard, or custom? - What language is it written in?</p>"},{"location":"crypto/starting-point/#download-and-analyze-the-related-files","title":"Download and analyze the related files","text":"<p>Pretty self explanatory. Download the challenge files, then read the code and familiarize yourself with it.  You don't necessarily need to understand exactly how it works, just get a feel for what each function does. For example, you don't need to understand how exactly some function called <code>F</code> works, but figure out that it's used to encrypt data. You should also probably run the file locally. Crypto challenges are generally pretty safe and won't brick your machine, but always understand code before you run it and a VM is still recommended. Pro tip: If it's python, you can import the file in an interpretter and call the functions one at a time with varying parameters to get a feel for what they do.</p>"},{"location":"crypto/starting-point/#identify-the-challenge-task","title":"Identify the challenge task","text":"<p>Now that you have a general idea of how the file works, identify what it is the challenge is asking you to do.  Are you trying to break the encryption given a set of parameters? Are you trying to break the encryption given an arbitrary set of parameters? Do you simply have to reverse engineer the custom encryption scheme? Usually in cryptography challenges you can find a clear goal to work towards and identifying what exactly that is will help you in the next steps.</p>"},{"location":"crypto/starting-point/#research-the-challenge","title":"Research the challenge","text":"<p>If you know how to solve the challenge you can skip this step, but usually challenges involve things we don't know or don't understand. So the next step is to understand. The first step in general is to understand the crypto system. Even custom crypto systems are typically based in real crypto system.  Next, you probably will have to attack the system. Research known attacks for the system. Usually the attacks only work under certain conditions, so make sure you understand what makes the attack work or not work. And what's the first step in researching any challenge? Google the challenge name. It uses some custom scheme called the \"Ravin Crypto System\"? A quick google finds a real scheme called the Rabin Crypto System. Sometimes the challenge name refers to an attack.  The challenge is about buying poodles through a command line? Google the crypto system and \"poodle\" and you'll find information on the POODLE attack.</p>"},{"location":"crypto/starting-point/#attempt-solutions","title":"Attempt solutions","text":"<p>The final step is to start throwing things at the challenge.  By this point, hopefully you understand what the challenge wants, what crypto system it uses, and some possible attacks to achieve what it wants. Write up some code and perform those attacks! Some tips for when you're trying an attack: - If it's a brute force attack, add a progress bar that updates every 50 attempts or so. Challenges won't require you to run a brute force for hours, so if you're making slow progress, you probably need to fine tune your attack or find a different approach. - Try your attack with a trivial example (something easy to solve) to make sure that your attack works before throwing it at the challenge - Document your attacks and why they failed as you go. Not only will this help when making a write up (please do write ups), but it will also help if you really do need to use that attack. Sometime you just need a bit more info and the attack actually will work and it will help you explain your work so far if you get someone else to help.</p>"},{"location":"forensics/file-forensics/","title":"File Forensics","text":"<ul> <li>compression</li> <li>file formats</li> </ul>"},{"location":"forensics/introduction/","title":"Forensics Introduction","text":"<p>Digital forensics takes on a different form between CTFs and the real world.</p> <p>Within CTFs forensics challenges are more akin to puzzles: analyzing, processing, and recovering hidden data out of static files. You might extract a corrupted image fime out of a disk dump, which when repaired turns into a QR code that links to an MP3 file, whose spectrograph contains the flag.</p> <p>By contrast, in the real world, forensics takes the form of recovering and analyzing data left on a computer, mainly for use as evidence in a court of law. In this case, one is often looking for evidence of malicious action.</p>"},{"location":"forensics/introduction/#skills-to-know","title":"Skills to Know","text":"<ul> <li>Scripting languages (especially Python!)</li> <li>Familarization with manipulating binary data</li> <li>Knowledge of different file formats, protocols, structures, and encodings</li> </ul>"},{"location":"forensics/resources/","title":"Resources/Tools","text":"<p>The following is a hastily put-together list of relevant tools and resources.</p> <ul> <li>apackets - online packet analyzer</li> <li>stego-toolkit - collection of steganography tools</li> <li>CyberChef Recipes - collection of CyberChef recipes</li> <li>IP to hex</li> <li>pymodbus - idk sometimes modbus comes up</li> <li>Modbus 101</li> <li>LightTheWay Writeup - challenge using modbus</li> <li>kcpassword decoder - Mac moment</li> <li>Android Forensics References - descriptions of folders in Android filesystem</li> <li></li> </ul>"},{"location":"misc/resources/","title":"Resources/Tools","text":"<p>The following is a hastily put-together list of relevant tools and resources.</p> <ul> <li>Universal Radio Hacker (URH)</li> <li>URH tutorial</li> <li>Example signals challenge writeup</li> <li>Binary polyglots</li> </ul>"},{"location":"pwn/resources/","title":"Resources/Tools","text":"<p>The following is a hastily put-together list of relevant tools and resources.</p> <ul> <li>Libc database search</li> <li>YT playlist on pwn basics</li> <li>ROP leaking libc address - HackTricks</li> <li>tutorials on various pwn techniques</li> <li> <p>pyjail resource - literally in mandarin</p> </li> <li> <p>Funny payload:</p> </li> </ul> <pre><code>  (__builtins__:=__import__('code'))==(lambda:interact())()\n__import__(\"os\").system(\"cat flag*\")\n</code></pre> <ul> <li>Zeratool - automatic exploit generation</li> <li>remenissions - simple autopwner</li> <li>Reverse TCP Shellcode</li> <li>format1 - example format string challenge writeup</li> </ul>"},{"location":"rev/resources/","title":"Resources/Tools","text":"<p>The following is a hastily put-together list of relevant tools and resources.</p> <ul> <li>C++ Python bytecode disassembler</li> <li>debugger.lua - debugger for lua </li> <li>ShellStorm Assembler/Disassembler - assembly/disassembly of shellcode</li> <li>Deobfuscating powershell</li> <li>PSDecode - script for deobfuscating PowerShell scripts</li> <li> <p>movfuscator</p> </li> <li> <p>Silly angr script:</p> </li> </ul> <pre><code>import angr\nimport sys\n\ndef main(argv):\n  path_to_binary = \"./three\"\n  project = angr.Project(path_to_binary)\n  initial_state = project.factory.entry_state()\n  sm = project.factory.simgr(initial_state)\n  sm.explore(find=[], avoid=[])  \n  for state in sm.deadended:\n    print(state.posix.dumps(sys.stdin.fileno()))\n  else:\n    raise Exception('Could not find the solution')\n\nif __name__ == '__main__':\n  main(sys.argv)\n</code></pre>"},{"location":"web/resources/","title":"Resources/Tools","text":"<p>The following is a hastily put-together list of relevant tools and resources.</p> <ul> <li>ffuf - web fuzzer</li> <li>FeroxBuster - web fuzzer but in Rust</li> <li>Kiterunner - Contextual Content Discovery tool</li> <li>git-dumper - tool to dump a git repo from a website</li> <li>gin - git index file parser</li> <li>ParamSpider - Python URL parameter discovery automation</li> <li>Directory Traversal, LFI, and /proc - article</li> <li>FlaskUnsign - tool to fetch, decode, brute-force, and craft Flask session cookies</li> </ul>"}]}